class Solution {
    public int trap(int[] height) {
        int len = height.length;
        
        // calculate left max boundary in array known as Auxiliary Array
        int[] leftMax = new int[len];
        leftMax[0] = height[0];
        for(int i=1; i<len; i++){
            leftMax[i] = Math.max(height[i], leftMax[i-1]);
        }

        // calculate right max boundary in array known as Auxiliary Array
        int[] rigthMax = new int[len];
        rigthMax[len-1] = height[len-1];
        for(int i=len-2; i>=0; i--){
            rigthMax[i] = Math.max(height[i], rigthMax[i+1]);
        }

        int trapWater = 0;
        // Calculate trapped water inside the block
        for(int i=0; i<len; i++){
            int waterLevel = Math.min(leftMax[i], rigthMax[i]);
            trapWater += waterLevel - height[i];
        }
        return trapWater;
    }
}
